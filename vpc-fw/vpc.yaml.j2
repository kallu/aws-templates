{#
   This is Jinja2 template that will generate Cloudformation YAML template
   with input from config.json in this same directory.

   Install Jinja CLI

   % pip install jinja-cli

   then render Cloudformation template

   % jinja2 vpc.yaml.j2 config.json > vpc.yaml
#}

{# Comma separated list of strings with letter X replaced by AZ identifier in upper-case #}
{% macro ForAllAZs(az,format) -%}
{% for x in az -%}
{{ format|replace('X', x.az.upper()) }}{{ ", " if not loop.last else "" }}
{%- endfor %}
{%- endmacro %}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: Inspection + Egress VPCs v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Inspection VPC
        Parameters:
          - InspectionVpcCidr
      -
        Label:
          default: Egress VPC
        Parameters:
          - EgressVpcCidr
{%- for x in AZ %}
          - Eip{{x.az|upper}}
{%- endfor %}
      -
        Label:
          default: TGW Configuration
        Parameters:
          - TgwAttachment
{%- for x in [1,2,3] %}
          - TgwRouteCidr{{x}}
{%- endfor %}

Parameters:

  EgressVpcCidr:
    Type: String
    Description: Egress VPC CIDR
    Default: '{{VPC.egress}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

{%- for x in AZ %}
  Eip{{x.az|upper}}:
    Type: String
    Description: Pre-allocated EIP ID for AZ-{{x.az|upper}} (optional)
    Default: ''
{% endfor %}

  InspectionVpcCidr:
    Type: String
    Description: Inspection VPC CIDR
    Default: '{{VPC.inspection}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

  TgwAttachment:
    Type: String
    Description: TGW ID attached to both VPCs (optional)
    Default: ''

{%- for x in [1,2,3] %}
  TgwRouteCidr{{x}}:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
{%- endfor %}

Conditions:
{%- for x in AZ %}
  CreateEip{{x.az|upper}}: !Equals [!Ref Eip{{x.az|upper}}, "" ]
{%- endfor %}
  HasTgwAttachment: !Not [ !Equals [!Ref TgwAttachment, "" ] ]
{%- for n in [1,2,3] %}
  HasTgwRouteCidr{{n}}: !Not [ !Equals [!Ref TgwRouteCidr{{n}}, "" ] ]
  AddTgwRoute{{n}}: !And [ Condition: HasTgwAttachment, Condition: HasTgwRouteCidr{{n}} ]
{%- endfor %}
  
Resources:

  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref InspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC' 

  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref EgressVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC'

{% include 'internetaccess.yaml.j2' %}
{% include 'tgwattachment.yaml.j2' %}

{%- for n in [1,2,3] %}
  PubTGWRoute{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    DependsOn: InspectionTgwAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref TgwAttachment
{%- endfor %}

{% include 'networkfw.yaml.j2' %}

{%- for x in AZ %}
{% include 'subnets.yaml.j2' %}
{% include 'nat.yaml.j2' %}
{% include 'routes.yaml.j2' %}
{%- for n in [1,2,3] %}
  EgressTGWRoute{{x.az|upper}}{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTable{{x.az|upper}}
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref TgwAttachment
{%- endfor %}
{%- endfor %}

Outputs:

  EgressVpcId:
    Description: VPC ID
    Value: !Ref EgressVPC
    Export:
      Name: !Sub '${AWS::StackName}-EgressVpcId'

  InspectionVpcId:
    Description: VPC ID
    Value: !Ref InspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-InspectionVpcId'
