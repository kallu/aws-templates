{#
   This is Jinja2 template that will generate Cloudformation YAML template
   with input from config.json in this same directory.

   Install Jinja CLI

   % pip install jinja-cli

   then render Cloudformation template

   % jinja2 vpc.yaml.j2 config.json > vpc.yaml
#}

{# Comma separated list of strings with letter X replaced by AZ identifier in upper-case #}
{% macro ForAllAZs(az,format) -%}
{% for x in az -%}
{{ format|replace('X', x.az.upper()) }}{{ ", " if not loop.last else "" }}
{%- endfor %}
{%- endmacro %}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: Inspection + Edge VPCs v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Internal Inspection VPC
        Parameters:
          - InternalInspectionVpcCidr
      -
        Label:
          default: External Inspection VPC
        Parameters:
          - ExternalInspectionVpcCidr
      -
        Label:
          default: Edge VPC
        Parameters:
          - EdgeVpcCidr
{%- for x in AZ %}
          - Eip{{x.az|upper}}
{%- endfor %}
      -
        Label:
          default: TGW Configuration
        Parameters:
          - TgwAttachment
{%- for x in [1,2,3] %}
          - TgwRouteCidr{{x}}
{%- endfor %}

Parameters:

  EdgeVpcCidr:
    Type: String
    Description: Edge VPC CIDR
    Default: '{{VPC.edge}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

{%- for x in AZ %}
  Eip{{x.az|upper}}:
    Type: String
    Description: Pre-allocated EIP ID for AZ-{{x.az|upper}} (optional)
    Default: ''
{% endfor %}

  InternalInspectionVpcCidr:
    Type: String
    Description: Internal Inspection VPC CIDR
    Default: '{{VPC.internalinspection}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

  ExternalInspectionVpcCidr:
    Type: String
    Description: External Inspection VPC CIDR
    Default: '{{VPC.externalinspection}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

  TgwAttachment:
    Type: String
    Description: TGW ID attached to VPCs (optional)
    Default: ''

{%- for x in [1,2,3] %}
  TgwRouteCidr{{x}}:
    Type: String
    Description: CIDR to be routed from Edge to TGW (optional)
    Default: ''
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
{%- endfor %}

Conditions:
{%- for x in AZ %}
  CreateEip{{x.az|upper}}: !Equals [!Ref Eip{{x.az|upper}}, "" ]
{%- endfor %}
  HasTgwAttachment: !Not [ !Equals [!Ref TgwAttachment, "" ] ]
{%- for n in [1,2,3] %}
  HasTgwRouteCidr{{n}}: !Not [ !Equals [!Ref TgwRouteCidr{{n}}, "" ] ]
  AddTgwRoute{{n}}: !And [ Condition: HasTgwAttachment, Condition: HasTgwRouteCidr{{n}} ]
{%- endfor %}
  
Resources:

  InternalInspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref InternalInspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Internal Inspection VPC'

  ExternalInspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ExternalInspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} On-prem Inspection VPC'

  EdgeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref EdgeVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Edge VPC'

{% include 'internetaccess.yaml.j2' %}
{% include 'tgwattachment.yaml.j2' %}

{%- for n in [1,2,3] %}
  PubTGWRoute{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    DependsOn: InternalInspectionTgwAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref TgwAttachment
{%- endfor %}

{%- for fw in ['Internal', 'External'] %}
{% include 'networkfw.yaml.j2' %}
{%- endfor %}

{%- for x in AZ %}
{% include 'subnets.yaml.j2' %}
{% include 'nat.yaml.j2' %}
{% include 'routes.yaml.j2' %}
{%- for n in [1,2,3] %}
  EdgeTGWRoute{{x.az|upper}}{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    DependsOn: EdgeTgwAttachment
    Properties:
      RouteTableId: !Ref EdgeTGWRouteTable{{x.az|upper}}
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref TgwAttachment
{%- endfor %}
{%- endfor %}

Outputs:

  EdgeVpcId:
    Description: VPC ID
    Value: !Ref EdgeVPC
    Export:
      Name: !Sub '${AWS::StackName}-EdgeVpcId'

  InternalInspectionVpcId:
    Description: VPC ID
    Value: !Ref InternalInspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-InternalInspectionVpcId'

  ExternalInspectionVpcId:
    Description: VPC ID
    Value: !Ref ExternalInspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-ExternalInspectionVpcId'
