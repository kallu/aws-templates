{#
   This is Jinja2 template that will generate Cloudformation YAML template
   with input from config.json in this same directory.

   Install Jinja CLI

   % pip install jinja-cli

   then render Cloudformation template

   % jinja2 vpc.yaml.j2 config.json > vpc.yaml
#}

{# Comma separated list of strings with letter X replaced by AZ identifier in lower-case #}
{% macro ForAllAZs(az,format) -%}
{% for x in az -%}
{{ format|replace('X', x.az.lower()) }}{{ ", " if not loop.last else "" }}
{%- endfor %}
{%- endmacro %}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: Inspection + Egress VPCs v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Egress VPC
        Parameters:
          - InspectionVpcCidr
{%- for x in AZ %}
          - InspectionTGWCidr{{x.az|lower}}
{%- endfor %}
{%- for x in AZ %}
          - InspectionFWCidr{{x.az|lower}}
{%- endfor %}
      -
        Label:
          default: Egress VPC
        Parameters:
          - EgressVpcCidr
{%- for x in AZ %}
          - EgressTGWCidr{{x.az|lower}}
{%- endfor %}
{%- for x in AZ %}
          - EgressPubCidr{{x.az|lower}}
{%- endfor %}
{%- for x in AZ %}
          - Eip{{x.az|lower}}
{%- endfor %}
      -
        Label:
          default: Routing to TGW
        Parameters:
{%- for x in [1,2,3] %}
          - TgwRouteCidr{{x}}
{%- endfor %}

Parameters:

  EgressVpcCidr:
    Type: String
    Description: Egress VPC CIDR
    Default: '{{VPC.egress}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

  InspectionVpcCidr:
    Type: String
    Description: Inspection VPC CIDR
    Default: '{{VPC.inspection}}'
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

{% for x in AZ %}
  EgressTGWCidr{{x.az|lower}}:
    Type: String
    Description: Egress VPC TGW Subnet {{x.az|lower}}
    Default: '{{x.egress_tgw}}'
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  InspectionTGWCidr{{x.az|lower}}:
    Type: String
    Description: Inspection VPC TGW Subnet {{x.az|lower}}
    Default: '{{x.inspection_tgw}}'
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  EgressPubCidr{{x.az|lower}}:
    Type: String
    Description: Egress VPC Public Subnet {{x.az|lower}}
    Default: '{{x.egress_pub}}'
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  InspectionFWCidr{{x.az|lower}}:
    Type: String
    Description: Inspection VPC FW Subnet {{x.az|lower}}
    Default: '{{x.inspection_fw}}'
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  Eip{{x.az|lower}}:
    Type: String
    Description: Pre-allocated EIP ID for AZ-{{x.az|lower}} (optional)
    Default: ''
{% endfor %}

  EgressTgwAttachment:
    Type: String
    Description: TGW attached to egress VPC (optional)
    Default: ''

  InspectionTgwAttachment:
    Type: String
    Description: TGW attache to inspection VPC (optional)
    Default: ''

{%- for x in [1,2,3] %}
  TgwRouteCidr{{x}}:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
{%- endfor %}

Conditions:
{%- for x in AZ %}
  CreateEip{{x.az|lower}}: !Equals [!Ref Eip{{x.az|lower}}, "" ]
{%- endfor %}
  HasEgressTgwAttachment: !Not [ !Equals [!Ref EgressTgwAttachment, "" ] ]
  HasInspectionTgwAttachment: !Not [ !Equals [!Ref InspectionTgwAttachment, "" ] ]
{%- for n in [1,2,3] %}
  HasTgwRouteCidr{{n}}: !Not [ !Equals [!Ref TgwRouteCidr{{n}}, "" ] ]
  AddTgwRoute{{n}}: !And [ Condition: HasEgressTgwAttachment, Condition: HasTgwRouteCidr{{n}} ]
{%- endfor %}
  
Resources:

  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref EgressVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC'

  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref InspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC' 

{% include 'internetaccess.yaml.j2' %}
{%- for n in [1,2,3] %}
  PubTGWRoute{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref EgressTgwAttachment
{%- endfor %}

{% include 'networkfw.yaml.j2' %}

{%- for x in AZ %}
  InspectionTGWRoute{{x.az|lower}}:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTable{{x.az|lower}}
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 1, !Split [ ':', !Select [ 0, !GetAtt NetworkFW{{x.az|lower}}.EndpointIds ] ] ]
{%- endfor %}

{%- for x in AZ %}
{% include 'subnets.yaml.j2' %}
{% include 'nat.yaml.j2' %}
{% include 'routes.yaml.j2' %}
{%- for n in [1,2,3] %}
  EgressTGWRoute{{x.az|lower}}{{n}}:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute{{n}}
    Properties:
      RouteTableId: !Ref EgressTGWRouteTable{{x.az|lower}}
      DestinationCidrBlock: !Ref TgwRouteCidr{{n}}
      TransitGatewayId: !Ref EgressTgwAttachment
{%- endfor %}
{%- endfor %}

Outputs:

  EgressVpcId:
    Description: VPC ID
    Value: !Ref EgressVPC
    Export:
      Name: !Sub '${AWS::StackName}-EgressVpcId'

  InspectionVpcId:
    Description: VPC ID
    Value: !Ref InspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-InspectionVpcId'
