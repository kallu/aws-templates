




---
AWSTemplateFormatVersion: '2010-09-09'
Description: Inspection + Egress VPCs v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Inspection VPC
        Parameters:
          - InspectionVpcCidr
      -
        Label:
          default: Egress VPC
        Parameters:
          - EgressVpcCidr
          - EipA
          - EipB
          - EipC
      -
        Label:
          default: TGW Configuration
        Parameters:
          - TgwAttachment
          - TgwRouteCidr1
          - TgwRouteCidr2
          - TgwRouteCidr3

Parameters:

  EgressVpcCidr:
    Type: String
    Description: Egress VPC CIDR
    Default: '10.0.0.0/25'
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
  EipA:
    Type: String
    Description: Pre-allocated EIP ID for AZ-A (optional)
    Default: ''

  EipB:
    Type: String
    Description: Pre-allocated EIP ID for AZ-B (optional)
    Default: ''

  EipC:
    Type: String
    Description: Pre-allocated EIP ID for AZ-C (optional)
    Default: ''


  InspectionVpcCidr:
    Type: String
    Description: Inspection VPC CIDR
    Default: '100.64.0.0/25'
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  TgwAttachment:
    Type: String
    Description: TGW ID attached to both VPCs (optional)
    Default: ''
  TgwRouteCidr1:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  TgwRouteCidr2:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  TgwRouteCidr3:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"

Conditions:
  CreateEipA: !Equals [!Ref EipA, "" ]
  CreateEipB: !Equals [!Ref EipB, "" ]
  CreateEipC: !Equals [!Ref EipC, "" ]
  HasTgwAttachment: !Not [ !Equals [!Ref TgwAttachment, "" ] ]
  HasTgwRouteCidr1: !Not [ !Equals [!Ref TgwRouteCidr1, "" ] ]
  AddTgwRoute1: !And [ Condition: HasTgwAttachment, Condition: HasTgwRouteCidr1 ]
  HasTgwRouteCidr2: !Not [ !Equals [!Ref TgwRouteCidr2, "" ] ]
  AddTgwRoute2: !And [ Condition: HasTgwAttachment, Condition: HasTgwRouteCidr2 ]
  HasTgwRouteCidr3: !Not [ !Equals [!Ref TgwRouteCidr3, "" ] ]
  AddTgwRoute3: !And [ Condition: HasTgwAttachment, Condition: HasTgwRouteCidr3 ]
  
Resources:

  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref InspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC' 

  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref EgressVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC'

  InetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Egress VPC Internet gateway'

  InetGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EgressVPC
      InternetGatewayId: !Ref InetGW

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public route-table'

  PubDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InetGW

  InspectionTgwAttachment:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    Condition: HasTgwAttachment
    Properties:
      VpcId: !Ref InspectionVPC
      TransitGatewayId: !Ref TgwAttachment
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName} Inspection VPC'
      SubnetIds:
        - !Ref InspectionTGWSubnetA
        - !Ref InspectionTGWSubnetB
        - !Ref InspectionTGWSubnetC

  EgressTgwAttachment:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    Condition: HasTgwAttachment
    Properties:
      VpcId: !Ref EgressVPC
      TransitGatewayId: !Ref TgwAttachment
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName} Egress VPC'
      SubnetIds:
        - !Ref EgressTGWSubnetA
        - !Ref EgressTGWSubnetB
        - !Ref EgressTGWSubnetC

  PubTGWRoute1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    DependsOn: InspectionTgwAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref TgwAttachment
  PubTGWRoute2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    DependsOn: InspectionTgwAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref TgwAttachment
  PubTGWRoute3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    DependsOn: InspectionTgwAttachment
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref TgwAttachment

  FwRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW route-table'

  FwDefaultRoute:
    Type: AWS::EC2::Route
    Condition: HasTgwAttachment
    DependsOn: InspectionTgwAttachment
    Properties:
      RouteTableId: !Ref FwRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      TransitGatewayId: !Ref TgwAttachment

  NetworkFW:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub '${AWS::StackName}'
      FirewallPolicyArn: !Ref DefaultFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionFWSubnetA
        - SubnetId: !Ref InspectionFWSubnetB
        - SubnetId: !Ref InspectionFWSubnetC
      Description: Network firewall to inspect outbound traffic to internet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} network firewall'
  # See https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
  InspectionTGWRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'a:', !Join [ ',', !GetAtt NetworkFW.EndpointIds ] ] ] ] ]
  # See https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
  InspectionTGWRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'b:', !Join [ ',', !GetAtt NetworkFW.EndpointIds ] ] ] ] ]
  # See https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
  InspectionTGWRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableC
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 0, !Split [ ',', !Select [ 1 , !Split [ 'c:', !Join [ ',', !GetAtt NetworkFW.EndpointIds ] ] ] ] ]

  DefaultFirewallPolicy:
    Type: 'AWS::NetworkFirewall::FirewallPolicy'
    Properties:
      FirewallPolicyName: !Sub "${AWS::StackName}-default-policy"
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:pass'
        StatelessFragmentDefaultActions:
          - 'aws:pass'
      Description: Default firewall policy passing everything
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} default policy'

# ADD DEFAULT POLICY AND RuleGroup
# Should there be 1 NFW and then fix the cross AZ routing manually?

#  SampleStatefulRulegroup:
#    Type: 'AWS::NetworkFirewall::RuleGroup'
#    Properties:
#      RuleGroupName: SampleStatefulRulegroupName
#      Type: STATEFUL
#      RuleGroup:
#        RulesSource:
#          RulesString: >-
#            pass tcp 10.20.20.0/24 45400:45500 <> 10.10.10.0/24 5203
#            (msg:"test";sid:1;rev:1;)
#      Capacity: 100
#      Description: Rulegroup description goes here
#      Tags:
#        - Key: Foo
#          Value: Bar

  EgressTGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [ 0 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-A'

  EgressPubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [ 4 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-A'

  InspectionTGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [ 0 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-A'

  InspectionFWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Select [ 4 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-A'
  NatGwA:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubnetA
      AllocationId: !If [ CreateEipA, !GetAtt NatEipA.AllocationId, !Ref EipA ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-A'

  NatEipA:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateEipA
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-A'

  EgressTGWRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-A'

  EgressTGWSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableA
      SubnetId: !Ref EgressTGWSubnetA

  EgressTGWDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwA

  EgressPubSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubnetA

  InspectionTGWRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-A'

  InspectionTGWSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableA
      SubnetId: !Ref InspectionTGWSubnetA

  InspectionTGWSFWRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubnetA

  EgressTGWRouteA1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableA
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteA2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableA
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteA3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableA
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [ 1 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-B'

  EgressPubSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [ 5 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-B'

  InspectionTGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [ 1 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-B'

  InspectionFWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Select [ 5 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-B'
  NatGwB:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubnetB
      AllocationId: !If [ CreateEipB, !GetAtt NatEipB.AllocationId, !Ref EipB ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-B'

  NatEipB:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateEipB
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-B'

  EgressTGWRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-B'

  EgressTGWSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableB
      SubnetId: !Ref EgressTGWSubnetB

  EgressTGWDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwB

  EgressPubSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubnetB

  InspectionTGWRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-B'

  InspectionTGWSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableB
      SubnetId: !Ref InspectionTGWSubnetB

  InspectionTGWSFWRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubnetB

  EgressTGWRouteB1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableB
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteB2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableB
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteB3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableB
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Select [ 2 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-C'

  EgressPubSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Select [ 6 , !Cidr [ !Ref EgressVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-C'

  InspectionTGWSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Select [ 2 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-C'

  InspectionFWSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Select [ 6 , !Cidr [ !Ref InspectionVpcCidr, 8, 4 ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-C'
  NatGwC:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubnetC
      AllocationId: !If [ CreateEipC, !GetAtt NatEipC.AllocationId, !Ref EipC ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-C'

  NatEipC:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Condition: CreateEipC
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-C'

  EgressTGWRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-C'

  EgressTGWSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableC
      SubnetId: !Ref EgressTGWSubnetC

  EgressTGWDefaultRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwC

  EgressPubSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubnetC

  InspectionTGWRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-C'

  InspectionTGWSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableC
      SubnetId: !Ref InspectionTGWSubnetC

  InspectionTGWSFWRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubnetC

  EgressTGWRouteC1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableC
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteC2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableC
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref TgwAttachment
  EgressTGWRouteC3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    DependsOn: EgressTgwAttachment
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableC
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref TgwAttachment

Outputs:

  EgressVpcId:
    Description: VPC ID
    Value: !Ref EgressVPC
    Export:
      Name: !Sub '${AWS::StackName}-EgressVpcId'

  InspectionVpcId:
    Description: VPC ID
    Value: !Ref InspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-InspectionVpcId'
