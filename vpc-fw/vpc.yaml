




---
AWSTemplateFormatVersion: '2010-09-09'
Description: Inspection + Egress VPCs v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Egress VPC
        Parameters:
          - InspectionVpcCidr
          - InspectionTGWCidra
          - InspectionTGWCidrb
          - InspectionTGWCidrc
          - InspectionFWCidra
          - InspectionFWCidrb
          - InspectionFWCidrc
      -
        Label:
          default: Egress VPC
        Parameters:
          - EgressVpcCidr
          - EgressTGWCidra
          - EgressTGWCidrb
          - EgressTGWCidrc
          - EgressPubCidra
          - EgressPubCidrb
          - EgressPubCidrc
          - Eipa
          - Eipb
          - Eipc
      -
        Label:
          default: Routing to TGW
        Parameters:
          - TgwRouteCidr1
          - TgwRouteCidr2
          - TgwRouteCidr3

Parameters:

  EgressVpcCidr:
    Type: String
    Description: Egress VPC CIDR
    Default: '10.0.0.128/25'
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  InspectionVpcCidr:
    Type: String
    Description: Inspection VPC CIDR
    Default: '10.0.0.0/25'
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"


  EgressTGWCidra:
    Type: String
    Description: Egress VPC TGW Subnet a
    Default: '10.0.0.128/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionTGWCidra:
    Type: String
    Description: Inspection VPC TGW Subnet a
    Default: '10.0.0.0/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EgressPubCidra:
    Type: String
    Description: Egress VPC Public Subnet a
    Default: '10.0.0.144/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionFWCidra:
    Type: String
    Description: Inspection VPC FW Subnet a
    Default: '10.0.0.16/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  Eipa:
    Type: String
    Description: Pre-allocated EIP ID for AZ-a (optional)
    Default: ''

  EgressTGWCidrb:
    Type: String
    Description: Egress VPC TGW Subnet b
    Default: '10.0.0.160/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionTGWCidrb:
    Type: String
    Description: Inspection VPC TGW Subnet b
    Default: '10.0.0.32/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EgressPubCidrb:
    Type: String
    Description: Egress VPC Public Subnet b
    Default: '10.0.0.176/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionFWCidrb:
    Type: String
    Description: Inspection VPC FW Subnet b
    Default: '10.0.0.48/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  Eipb:
    Type: String
    Description: Pre-allocated EIP ID for AZ-b (optional)
    Default: ''

  EgressTGWCidrc:
    Type: String
    Description: Egress VPC TGW Subnet c
    Default: '10.0.0.192/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionTGWCidrc:
    Type: String
    Description: Inspection VPC TGW Subnet c
    Default: '10.0.0.64/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EgressPubCidrc:
    Type: String
    Description: Egress VPC Public Subnet c
    Default: '10.0.0.208/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  InspectionFWCidrc:
    Type: String
    Description: Inspection VPC FW Subnet c
    Default: '10.0.0.80/28'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  Eipc:
    Type: String
    Description: Pre-allocated EIP ID for AZ-c (optional)
    Default: ''


  EgressTgwAttachment:
    Type: String
    Description: TGW attached to egress VPC (optional)
    Default: ''

  InspectionTgwAttachment:
    Type: String
    Description: TGW attache to inspection VPC (optional)
    Default: ''
  TgwRouteCidr1:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  TgwRouteCidr2:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  TgwRouteCidr3:
    Type: String
    Description: CIDR to be routed from Egress to TGW (optional)
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"

Conditions:
  CreateEipa: !Equals [!Ref Eipa, "" ]
  CreateEipb: !Equals [!Ref Eipb, "" ]
  CreateEipc: !Equals [!Ref Eipc, "" ]
  HasEgressTgwAttachment: !Not [ !Equals [!Ref EgressTgwAttachment, "" ] ]
  HasInspectionTgwAttachment: !Not [ !Equals [!Ref InspectionTgwAttachment, "" ] ]
  HasTgwRouteCidr1: !Not [ !Equals [!Ref TgwRouteCidr1, "" ] ]
  AddTgwRoute1: !And [ Condition: HasEgressTgwAttachment, Condition: HasTgwRouteCidr1 ]
  HasTgwRouteCidr2: !Not [ !Equals [!Ref TgwRouteCidr2, "" ] ]
  AddTgwRoute2: !And [ Condition: HasEgressTgwAttachment, Condition: HasTgwRouteCidr2 ]
  HasTgwRouteCidr3: !Not [ !Equals [!Ref TgwRouteCidr3, "" ] ]
  AddTgwRoute3: !And [ Condition: HasEgressTgwAttachment, Condition: HasTgwRouteCidr3 ]
  
Resources:

  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref EgressVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC'

  InspectionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref InspectionVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC' 

  InetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} Egress VPC Internet gateway'

  InetGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EgressVPC
      InternetGatewayId: !Ref InetGW

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public route-table'

  PubDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InetGW

  PubTGWRoute1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref EgressTgwAttachment
  PubTGWRoute2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref EgressTgwAttachment
  PubTGWRoute3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref EgressTgwAttachment

  FwRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW route-table'

  FwDefaultRoute:
    Type: AWS::EC2::Route
    Condition: HasInspectionTgwAttachment
    Properties:
      RouteTableId: !Ref FwRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      TransitGatewayId: !Ref InspectionTgwAttachment
  NetworkFWa:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub '${AWS::StackName}-a'
      FirewallPolicyArn: !Ref DefaultFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionFWSubneta
      Description: Network firewall to inspect outbound traffic to internet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} network firewall AZ-a'
  NetworkFWb:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub '${AWS::StackName}-b'
      FirewallPolicyArn: !Ref DefaultFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionFWSubnetb
      Description: Network firewall to inspect outbound traffic to internet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} network firewall AZ-b'
  NetworkFWc:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: !Sub '${AWS::StackName}-c'
      FirewallPolicyArn: !Ref DefaultFirewallPolicy
      VpcId: !Ref InspectionVPC
      SubnetMappings:
        - SubnetId: !Ref InspectionFWSubnetc
      Description: Network firewall to inspect outbound traffic to internet
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} network firewall AZ-c'

  DefaultFirewallPolicy:
    Type: 'AWS::NetworkFirewall::FirewallPolicy'
    Properties:
      FirewallPolicyName: !Sub "${AWS::StackName}-default-policy"
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:pass'
        StatelessFragmentDefaultActions:
          - 'aws:pass'
      Description: Default firewall policy passing everything
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} default policy'

#  SampleStatefulRulegroup:
#    Type: 'AWS::NetworkFirewall::RuleGroup'
#    Properties:
#      RuleGroupName: SampleStatefulRulegroupName
#      Type: STATEFUL
#      RuleGroup:
#        RulesSource:
#          RulesString: >-
#            pass tcp 10.20.20.0/24 45400:45500 <> 10.10.10.0/24 5203
#            (msg:"test";sid:1;rev:1;)
#      Capacity: 100
#      Description: Rulegroup description goes here
#      Tags:
#        - Key: Foo
#          Value: Bar

  InspectionTGWRoutea:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTablea
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 1, !Split [ ':', !Select [ 0, !GetAtt NetworkFWa.EndpointIds ] ] ]
  InspectionTGWRouteb:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableb
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 1, !Split [ ':', !Select [ 0, !GetAtt NetworkFWb.EndpointIds ] ] ]
  InspectionTGWRoutec:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTablec
      DestinationCidrBlock: '0.0.0.0/0'
      VpcEndpointId: !Select [ 1, !Split [ ':', !Select [ 0, !GetAtt NetworkFWc.EndpointIds ] ] ]
  EgressTGWSubneta:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref EgressTGWCidra
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-a'

  EgressPubSubneta:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref EgressPubCidra
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-a'

  InspectionTGWSubneta:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref InspectionTGWCidra
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-a'

  InspectionFWSubneta:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref InspectionFWCidra
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-a'
  NatGwa:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubneta
      AllocationId: !If [ CreateEipa, !GetAtt NatEipa.AllocationId, !Ref Eipa ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-a'

  NatEipa:
    Type: AWS::EC2::EIP
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Condition: CreateEipa
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-a'

  EgressTGWRouteTablea:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-a'

  EgressTGWSubnetRoutinga:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablea
      SubnetId: !Ref EgressTGWSubneta

  EgressTGWDefaultRoutea:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablea
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwa

  EgressPubSubnetRoutinga:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubneta

  InspectionTGWRouteTablea:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-a'

  InspectionTGWSubnetRoutinga:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTablea
      SubnetId: !Ref InspectionTGWSubneta

  InspectionTGWSFWRoutinga:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubneta

  EgressTGWRoutea1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablea
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRoutea2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablea
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRoutea3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablea
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWSubnetb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref EgressTGWCidrb
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-b'

  EgressPubSubnetb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref EgressPubCidrb
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-b'

  InspectionTGWSubnetb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref InspectionTGWCidrb
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-b'

  InspectionFWSubnetb:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref InspectionFWCidrb
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-b'
  NatGwb:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubnetb
      AllocationId: !If [ CreateEipb, !GetAtt NatEipb.AllocationId, !Ref Eipb ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-b'

  NatEipb:
    Type: AWS::EC2::EIP
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Condition: CreateEipb
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-b'

  EgressTGWRouteTableb:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-b'

  EgressTGWSubnetRoutingb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableb
      SubnetId: !Ref EgressTGWSubnetb

  EgressTGWDefaultRouteb:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableb
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwb

  EgressPubSubnetRoutingb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubnetb

  InspectionTGWRouteTableb:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-b'

  InspectionTGWSubnetRoutingb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTableb
      SubnetId: !Ref InspectionTGWSubnetb

  InspectionTGWSFWRoutingb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubnetb

  EgressTGWRouteb1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableb
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRouteb2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableb
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRouteb3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    Properties:
      RouteTableId: !Ref EgressTGWRouteTableb
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWSubnetc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref EgressTGWCidrc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW subnet-c'

  EgressPubSubnetc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EgressVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref EgressPubCidrc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC Public subnet-c'

  InspectionTGWSubnetc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref InspectionTGWCidrc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW subnet-c'

  InspectionFWSubnetc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InspectionVPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref InspectionFWCidrc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC FW subnet-c'
  NatGwc:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref EgressPubSubnetc
      AllocationId: !If [ CreateEipc, !GetAtt NatEipc.AllocationId, !Ref Eipc ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-c'

  NatEipc:
    Type: AWS::EC2::EIP
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Condition: CreateEipc
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC NAT-c'

  EgressTGWRouteTablec:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Egress VPC TGW route-table-c'

  EgressTGWSubnetRoutingc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablec
      SubnetId: !Ref EgressTGWSubnetc

  EgressTGWDefaultRoutec:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablec
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGwc

  EgressPubSubnetRoutingc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref EgressPubSubnetc

  InspectionTGWRouteTablec:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref InspectionVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Inspection VPC TGW route-table-c'

  InspectionTGWSubnetRoutingc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InspectionTGWRouteTablec
      SubnetId: !Ref InspectionTGWSubnetc

  InspectionTGWSFWRoutingc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FwRouteTable
      SubnetId: !Ref InspectionFWSubnetc

  EgressTGWRoutec1:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute1
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablec
      DestinationCidrBlock: !Ref TgwRouteCidr1
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRoutec2:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute2
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablec
      DestinationCidrBlock: !Ref TgwRouteCidr2
      TransitGatewayId: !Ref EgressTgwAttachment
  EgressTGWRoutec3:
    Type: AWS::EC2::Route
    Condition: AddTgwRoute3
    Properties:
      RouteTableId: !Ref EgressTGWRouteTablec
      DestinationCidrBlock: !Ref TgwRouteCidr3
      TransitGatewayId: !Ref EgressTgwAttachment

Outputs:

  EgressVpcId:
    Description: VPC ID
    Value: !Ref EgressVPC
    Export:
      Name: !Sub '${AWS::StackName}-EgressVpcId'

  InspectionVpcId:
    Description: VPC ID
    Value: !Ref InspectionVPC
    Export:
      Name: !Sub '${AWS::StackName}-InspectionVpcId'
