{#
   This is Jinja2 template that will generate Cloudformation YAML template
   with input from config.json in this same directory.

   Install Jinja CLI

   % pip install jinja-cli

   then render Cloudformation template

   % jinja2 vpc.yaml.j2 config.json > vpc.yaml
#}

---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC network v2.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC CIDR(s)
        Parameters:
          - VpcCidr
          - VpcIntraCidr
      -
        Label:
          default: Public subnets
        Parameters:
{% for x in AZ %}
          - PubCidr{{x.az|upper}}
{% endfor %}
      -
        Label:
          default: Private subnets
        Parameters:
{% for x in AZ %}
          - PrivCidr{{x.az|upper}}
{% endfor %}
      -
        Label:
          default: Internal subnets
        Parameters:
{% for x in AZ %}
          - IntraCidr{{x.az|upper}}
{% endfor %}
      -
        Label:
          default: VPC Endpoints
        Parameters:
          - InterfaceEndpoints


Parameters:

  VpcCidr:
    Type: String
    Description: VPC Primary CIDR
    Default: {{VPC.cidr}}
    AllowedPattern: "{{Pattern.VPC_PRIMARY_CIDR}}"

  VpcIntraCidr:
    Type: String
    Description: VPC secondary CIDR for intranet connectivity
    Default: ""
    AllowedPattern: "{{Pattern.VPC_SECONDARY_CIDR}}"

{% for x in AZ %}
  PubCidr{{x.az|upper}}:
    Type: String
    Description: Public Subnet {{x.az|upper}}
    Default: {{x.pubcidr}}
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  PrivCidr{{x.az|upper}}:
    Type: String
    Description: Private Subnet {{x.az|upper}}
    Default: {{x.privcidr}}
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  IntraCidr{{x.az|upper}}:
    Type: String
    Description: Intranet Subnet {{x.az|upper}}
    Default: ""
    AllowedPattern: "{{Pattern.VPC_SUBNET_CIDR}}"
  Eip{{x.az|upper}}:
    Type: String
    Description: Pre-allocated EIP ID for AZ-{{x.az|upper}} (optional)
    Default: ""
{% endfor %}

  InterfaceEndpoints:
    Type: String
    Description: Enable interface endpoints for AWS services
    Default: false
    AllowedValues:
      - false
      - true

Conditions:
{% for x in AZ %}
  Pub{{x.az|upper}}: !Not [!Equals [!Ref PubCidr{{x.az|upper}}, "" ]]  
  Priv{{x.az|upper}}: !Not [!Equals [!Ref PrivCidr{{x.az|upper}}, "" ]]
  Intra{{x.az|upper}}: !Not [!Equals [!Ref IntraCidr{{x.az|upper}}, "" ]]
  Nat{{x.az|upper}}: !And [ Condition: Pub{{x.az|upper}}, Condition: Priv{{x.az|upper}} ]
  NatPriv{{x.az|upper}}: !And [ Condition: Intra{{x.az|upper}}, Condition: Priv{{x.az|upper}} ]
  CreateEip{{x.az|upper}}: !And [ Condition: Nat{{x.az|upper}}, !Equals [!Ref Eip{{x.az|upper}}, "" ] ]
{% endfor %}
  PubAny: !Or [ Condition: PubA, Condition: PubB, Condition: PubC ]
  PrivAny: !Or [ Condition: PrivA, Condition: PrivB, Condition: PrivC ]
  IntraAny: !Or [ Condition: IntraA, Condition: IntraB, Condition: IntraC ]
  HasIntraCidr: !Not [!Equals [!Ref VpcIntraCidr, "" ]]
  EnableInterfaceEndpoints: !Equals [!Ref InterfaceEndpoints, "true"]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  VPCSecondaryCidr:
    Type: AWS::EC2::VPCCidrBlock
    Condition: HasIntraCidr
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcIntraCidr

  InetGW:
    Type: AWS::EC2::InternetGateway
    Condition: PubAny
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} internet gateway'

  InetGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PubAny
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InetGW

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: PubAny
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public route-table'

  PubDefaultRoute:
    Type: AWS::EC2::Route
    Condition: PubAny
    DependsOn: InetGW
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InetGW

{% for x in AZ %}
{% include 'subnets.yaml.j2' %}
{% include 'nat.yaml.j2' %}
{% include 'routes.yaml.j2' %}
{% endfor %}
{% include 's3endpoint.yaml.j2' %}
{% include 'ifendpoints.yaml.j2' %}
{% include 'paramstore.yaml.j2' %}

Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

{# TODO: This is assuming 3 AZ config.json, should be fixed to follow AZs defined in config.json #}

  PubSubnets:
    Description: Public Subnets
    Value: !Sub
      - '${subnetA},${subnetB},${subnetC}'
      - { subnetA: !If [ PubA, !Ref PubSubnetA, "" ], subnetB: !If [ PubB, !Ref PubSubnetB, "" ], subnetC: !If [ PubC, !Ref PubSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnets'

  PrivSubnets:
    Description: Private Subnets
    Value: !Sub
      - '${subnetA},${subnetB},${subnetC}'
      - { subnetA: !If [ PrivA, !Ref PrivSubnetA, "" ], subnetB: !If [ PrivB, !Ref PrivSubnetB, "" ], subnetC: !If [ PrivC, !Ref PrivSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-PrivSubnets'

  IntraSubnets:
    Description: Internal Subnets
    Value: !Sub
      - '${subnetA},${subnetB},${subnetC}'
      - { subnetA: !If [ IntraA, !Ref IntraSubnetA, "" ], subnetB: !If [ IntraB, !Ref IntraSubnetB, "" ], subnetC: !If [ IntraC, !Ref IntraSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-IntraSubnets'
