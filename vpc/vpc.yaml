




---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC network v2.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC CIDR(s)
        Parameters:
          - VpcCidr
          - VpcIntraCidr
      -
        Label:
          default: Public subnets
        Parameters:
          - PubCidrA
          - PubCidrB
          - PubCidrC
      -
        Label:
          default: NAT Gateway EIPs
        Parameters:
          - EipA
          - EipB
          - EipC
      -
        Label:
          default: Private subnets
        Parameters:
          - PrivCidrA
          - PrivCidrB
          - PrivCidrC
          - DefaultRouting
          - InterfaceEndpoints
      -
        Label:
          default: Internal subnets
        Parameters:
          - IntraCidrA
          - IntraCidrB
          - IntraCidrC
          - IntraCIDR
          - TransitGwId

Parameters:

  VpcCidr:
    Type: String
    Description: VPC Primary CIDR
    Default: '10.0.0.0/21'
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  VpcIntraCidr:
    Type: String
    Description: VPC secondary CIDR for intranet connectivity
    Default: '100.64.0.0/24'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"


  PubCidrA:
    Type: String
    Description: Public Subnet A
    Default: '10.0.0.0/24'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  PrivCidrA:
    Type: String
    Description: Private Subnet A
    Default: '10.0.4.0/24'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  IntraCidrA:
    Type: String
    Description: Intranet Subnet A
    Default: '100.64.0.0/26'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EipA:
    Type: String
    Description: Pre-allocated EIP ID for AZ-A (optional)
    Default: ''

  PubCidrB:
    Type: String
    Description: Public Subnet B
    Default: '10.0.1.0/24'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  PrivCidrB:
    Type: String
    Description: Private Subnet B
    Default: '10.0.5.0/24'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  IntraCidrB:
    Type: String
    Description: Intranet Subnet B
    Default: '100.64.0.64/26'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EipB:
    Type: String
    Description: Pre-allocated EIP ID for AZ-B (optional)
    Default: ''

  PubCidrC:
    Type: String
    Description: Public Subnet C
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  PrivCidrC:
    Type: String
    Description: Private Subnet C
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  IntraCidrC:
    Type: String
    Description: Intranet Subnet C
    Default: ''
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"
  EipC:
    Type: String
    Description: Pre-allocated EIP ID for AZ-C (optional)
    Default: ''


  TransitGwId:
    Type: String
    Description: Transit Gateway ID
    Default: ''

  InterfaceEndpoints:
    Type: String
    Description: Enable interface endpoints for AWS services
    Default: false
    AllowedValues:
      - false
      - true

  DefaultRouting:
    Type: String
    Description: Default route from private subnets
    Default: Public NAT
    AllowedValues:
      - Public NAT
      - Internal NAT

  IntraCIDR:
    Type: String
    Description: Internal CIDR that should always to routed to internal NAT
    Default: '100.64.0.0/10'
    AllowedPattern: "^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){0,1}$"

Conditions:

  PubA: !Not [!Equals [!Ref PubCidrA, "" ]]  
  PrivA: !Not [!Equals [!Ref PrivCidrA, "" ]]
  HasDefaultRouteA: !Or [ Condition: NatA, Condition: NatIntraA ]
  HasIntranetRouteA: !And [ Condition: HasIntranetsRouting, Condition: NatIntraA ]
  IntraA: !Not [!Equals [!Ref IntraCidrA, "" ]]
  NatA: !And [ Condition: PubA, Condition: PrivA, Condition: InternetViaPublicNAT ]
  NatIntraA: !And [ Condition: IntraA, Condition: PrivA, Condition: AttachTransitGateway, !Or [ Condition: InternetViaInternalNAT, Condition: HasIntranetsRouting ] ]
  CreateEipA: !And [ Condition: NatA, !Equals [!Ref EipA, "" ] ]

  PubB: !Not [!Equals [!Ref PubCidrB, "" ]]  
  PrivB: !Not [!Equals [!Ref PrivCidrB, "" ]]
  HasDefaultRouteB: !Or [ Condition: NatB, Condition: NatIntraB ]
  HasIntranetRouteB: !And [ Condition: HasIntranetsRouting, Condition: NatIntraB ]
  IntraB: !Not [!Equals [!Ref IntraCidrB, "" ]]
  NatB: !And [ Condition: PubB, Condition: PrivB, Condition: InternetViaPublicNAT ]
  NatIntraB: !And [ Condition: IntraB, Condition: PrivB, Condition: AttachTransitGateway, !Or [ Condition: InternetViaInternalNAT, Condition: HasIntranetsRouting ] ]
  CreateEipB: !And [ Condition: NatB, !Equals [!Ref EipB, "" ] ]

  PubC: !Not [!Equals [!Ref PubCidrC, "" ]]  
  PrivC: !Not [!Equals [!Ref PrivCidrC, "" ]]
  HasDefaultRouteC: !Or [ Condition: NatC, Condition: NatIntraC ]
  HasIntranetRouteC: !And [ Condition: HasIntranetsRouting, Condition: NatIntraC ]
  IntraC: !Not [!Equals [!Ref IntraCidrC, "" ]]
  NatC: !And [ Condition: PubC, Condition: PrivC, Condition: InternetViaPublicNAT ]
  NatIntraC: !And [ Condition: IntraC, Condition: PrivC, Condition: AttachTransitGateway, !Or [ Condition: InternetViaInternalNAT, Condition: HasIntranetsRouting ] ]
  CreateEipC: !And [ Condition: NatC, !Equals [!Ref EipC, "" ] ]

  PubAny: !Or [ Condition: PubA, Condition: PubB, Condition: PubC ]
  PrivAny: !Or [ Condition: PrivA, Condition: PrivB, Condition: PrivC ]
  IntraAny: !Or [ Condition: IntraA, Condition: IntraB, Condition: IntraC ]
  HasIntraCidr: !Not [!Equals [!Ref VpcIntraCidr, "" ]]
  HasIntranetsRouting: !Not [!Equals [!Ref IntraCIDR, "" ]]
  EnableInterfaceEndpoints: !Equals [!Ref InterfaceEndpoints, "true"]
  AttachTransitGateway: !And [ Condition: IntraAny, !Not [!Equals [!Ref TransitGwId, "" ]]]
  InternetViaPublicNAT: !And [ !Equals [!Ref DefaultRouting, "Public NAT" ], Condition: PubAny ]
  InternetViaInternalNAT: !And [ !Equals [!Ref DefaultRouting, "Internal NAT" ], Condition: IntraAny, Condition: AttachTransitGateway ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  VPCSecondaryCidr:
    Type: AWS::EC2::VPCCidrBlock
    Condition: HasIntraCidr
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcIntraCidr

  InetGW:
    Type: AWS::EC2::InternetGateway
    Condition: PubAny
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName} internet gateway'

  InetGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: PubAny
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InetGW

  PubRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: PubAny
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public route-table'

  PubDefaultRoute:
    Type: AWS::EC2::Route
    Condition: PubAny
    DependsOn: InetGW
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InetGW

  TGWAttachment:
    Type: AWS::EC2::TransitGatewayVpcAttachment
    Condition: AttachTransitGateway
    Properties: 
      SubnetIds:
      - !If
        - IntraA
        - !Ref IntraSubnetA
        - !Ref AWS::NoValue
      - !If
        - IntraB
        - !Ref IntraSubnetB
        - !Ref AWS::NoValue
      - !If
        - IntraC
        - !Ref IntraSubnetC
        - !Ref AWS::NoValue
      TransitGatewayId: !Ref TransitGwId
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IntraRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IntraAny
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} intranet route-table'

  IntraDefaultRoute:
    Type: AWS::EC2::Route
    Condition: AttachTransitGateway
    DependsOn: TGWAttachment
    Properties:
      RouteTableId: !Ref IntraRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      TransitGatewayId: !Ref TransitGwId

  VpcPubNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: !Sub "${AWS::StackName} public subnet NACL"

  NACLDenyPub2IntraEgress:
    Type: AWS::EC2::NetworkAclEntry
    Condition: HasIntraCidr
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      CidrBlock: !Ref VpcIntraCidr
      RuleAction: deny

  NACLPubDefaultEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      RuleNumber: 900
      Protocol: -1
      Egress: true
      CidrBlock: 0.0.0.0/0
      RuleAction: allow

  NACLDenyPub2IntraIngress:
    Type: AWS::EC2::NetworkAclEntry
    Condition: HasIntraCidr
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      RuleNumber: 100
      Protocol: -1
      Egress: false
      CidrBlock: !Ref VpcIntraCidr
      RuleAction: deny

  NACLPubDefaultIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      RuleNumber: 900
      Protocol: -1
      Egress: false
      CidrBlock: 0.0.0.0/0
      RuleAction: allow


  PubSubnetA:
    Type: AWS::EC2::Subnet
    Condition: PubA
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PubCidrA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public subnet-A'

  PubSubnetANACLattachment:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: PubA
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      SubnetId: !Ref PubSubnetA

  PrivSubnetA:
    Type: AWS::EC2::Subnet
    Condition: PrivA
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PrivCidrA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private subnet-A'

  IntraSubnetA:
    Type: AWS::EC2::Subnet
    Condition: IntraA
    DependsOn: VPCSecondaryCidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref IntraCidrA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} internal subnet-A'

  NatGwA:
    Type: AWS::EC2::NatGateway
    Condition: NatA
    Properties:
      ConnectivityType: public
      SubnetId: !Ref PubSubnetA
      AllocationId: !If [ CreateEipA, !GetAtt NatEipA.AllocationId, !Ref EipA ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} NAT-A'

  NatEipA:
    Type: AWS::EC2::EIP
    Condition: CreateEipA
    Properties:
      Domain: vpc

  NatGwIntraA:
    Type: AWS::EC2::NatGateway
    Condition: NatIntraA
    Properties:
      ConnectivityType: private
      SubnetId: !Ref IntraSubnetA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} InternalNAT-A'

  PrivRouteTableA:
    Type: AWS::EC2::RouteTable
    Condition: PrivA
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private route-table-A'

  PrivSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PrivA
    Properties:
      RouteTableId: !Ref PrivRouteTableA
      SubnetId: !Ref PrivSubnetA

  PrivDefaultRouteA:
    Type: AWS::EC2::Route
    Condition: HasDefaultRouteA
    Properties:
      RouteTableId: !Ref PrivRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If
        - InternetViaPublicNAT
        - !Ref NatGwA
        - !Ref NatGwIntraA

  PrivIntranetRouteA:
    Type: AWS::EC2::Route
    Condition: HasIntranetRouteA
    Properties:
      RouteTableId: !Ref PrivRouteTableA
      DestinationCidrBlock: !Ref IntraCIDR
      NatGatewayId: !Ref NatGwIntraA

  IntraSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IntraA
    Properties:
      RouteTableId: !Ref IntraRouteTable
      SubnetId: !Ref IntraSubnetA

  PubSubnetRoutingA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PubA
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnetA


  PubSubnetB:
    Type: AWS::EC2::Subnet
    Condition: PubB
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref PubCidrB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public subnet-B'

  PubSubnetBNACLattachment:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: PubB
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      SubnetId: !Ref PubSubnetB

  PrivSubnetB:
    Type: AWS::EC2::Subnet
    Condition: PrivB
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref PrivCidrB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private subnet-B'

  IntraSubnetB:
    Type: AWS::EC2::Subnet
    Condition: IntraB
    DependsOn: VPCSecondaryCidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref IntraCidrB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} internal subnet-B'

  NatGwB:
    Type: AWS::EC2::NatGateway
    Condition: NatB
    Properties:
      ConnectivityType: public
      SubnetId: !Ref PubSubnetB
      AllocationId: !If [ CreateEipB, !GetAtt NatEipB.AllocationId, !Ref EipB ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} NAT-B'

  NatEipB:
    Type: AWS::EC2::EIP
    Condition: CreateEipB
    Properties:
      Domain: vpc

  NatGwIntraB:
    Type: AWS::EC2::NatGateway
    Condition: NatIntraB
    Properties:
      ConnectivityType: private
      SubnetId: !Ref IntraSubnetB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} InternalNAT-B'

  PrivRouteTableB:
    Type: AWS::EC2::RouteTable
    Condition: PrivB
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private route-table-B'

  PrivSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PrivB
    Properties:
      RouteTableId: !Ref PrivRouteTableB
      SubnetId: !Ref PrivSubnetB

  PrivDefaultRouteB:
    Type: AWS::EC2::Route
    Condition: HasDefaultRouteB
    Properties:
      RouteTableId: !Ref PrivRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If
        - InternetViaPublicNAT
        - !Ref NatGwB
        - !Ref NatGwIntraB

  PrivIntranetRouteB:
    Type: AWS::EC2::Route
    Condition: HasIntranetRouteB
    Properties:
      RouteTableId: !Ref PrivRouteTableB
      DestinationCidrBlock: !Ref IntraCIDR
      NatGatewayId: !Ref NatGwIntraB

  IntraSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IntraB
    Properties:
      RouteTableId: !Ref IntraRouteTable
      SubnetId: !Ref IntraSubnetB

  PubSubnetRoutingB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PubB
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnetB


  PubSubnetC:
    Type: AWS::EC2::Subnet
    Condition: PubC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref PubCidrC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public subnet-C'

  PubSubnetCNACLattachment:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: PubC
    Properties:
      NetworkAclId: !Ref VpcPubNACL
      SubnetId: !Ref PubSubnetC

  PrivSubnetC:
    Type: AWS::EC2::Subnet
    Condition: PrivC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref PrivCidrC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private subnet-C'

  IntraSubnetC:
    Type: AWS::EC2::Subnet
    Condition: IntraC
    DependsOn: VPCSecondaryCidr
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: !Ref IntraCidrC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} internal subnet-C'

  NatGwC:
    Type: AWS::EC2::NatGateway
    Condition: NatC
    Properties:
      ConnectivityType: public
      SubnetId: !Ref PubSubnetC
      AllocationId: !If [ CreateEipC, !GetAtt NatEipC.AllocationId, !Ref EipC ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} NAT-C'

  NatEipC:
    Type: AWS::EC2::EIP
    Condition: CreateEipC
    Properties:
      Domain: vpc

  NatGwIntraC:
    Type: AWS::EC2::NatGateway
    Condition: NatIntraC
    Properties:
      ConnectivityType: private
      SubnetId: !Ref IntraSubnetC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} InternalNAT-C'

  PrivRouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: PrivC
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} private route-table-C'

  PrivSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PrivC
    Properties:
      RouteTableId: !Ref PrivRouteTableC
      SubnetId: !Ref PrivSubnetC

  PrivDefaultRouteC:
    Type: AWS::EC2::Route
    Condition: HasDefaultRouteC
    Properties:
      RouteTableId: !Ref PrivRouteTableC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !If
        - InternetViaPublicNAT
        - !Ref NatGwC
        - !Ref NatGwIntraC

  PrivIntranetRouteC:
    Type: AWS::EC2::Route
    Condition: HasIntranetRouteC
    Properties:
      RouteTableId: !Ref PrivRouteTableC
      DestinationCidrBlock: !Ref IntraCIDR
      NatGatewayId: !Ref NatGwIntraC

  IntraSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IntraC
    Properties:
      RouteTableId: !Ref IntraRouteTable
      SubnetId: !Ref IntraSubnetC

  PubSubnetRoutingC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PubC
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnetC


  S3vpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      RouteTableIds:
      - !If
        - PubAny
        - !Ref PubRouteTable
        - !Ref AWS::NoValue
      - !If
        - IntraAny
        - !Ref IntraRouteTable
        - !Ref AWS::NoValue
      - !If
        - PrivA
        - !Ref PrivRouteTableA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivRouteTableB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivRouteTableC
        - !Ref AWS::NoValue

  DynamoDBvpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      RouteTableIds:
      - !If
        - PubAny
        - !Ref PubRouteTable
        - !Ref AWS::NoValue
      - !If
        - IntraAny
        - !Ref IntraRouteTable
        - !Ref AWS::NoValue
      - !If
        - PrivA
        - !Ref PrivRouteTableA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivRouteTableB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivRouteTableC
        - !Ref AWS::NoValue

  VpcEndpointSecGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EnableInterfaceEndpoints
    Properties:
      GroupDescription: !Sub "VPC Interface endpoint sec.group ${AWS::StackName}"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          CidrIp: !Ref VpcCidr
          Description: Allow HTTPS from VPC CIDR
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        -
          CidrIp: !If [ IntraAny, !Ref VpcIntraCidr, !Ref AWS::NoValue ]
          Description: Allow HTTPS from VPC secondary CIDR
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443


  SSMvpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableInterfaceEndpoints
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecGroup
      SubnetIds:
      - !If
        - PrivA
        - !Ref PrivSubnetA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivSubnetB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivSubnetC
        - !Ref AWS::NoValue

  EC2vpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableInterfaceEndpoints
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecGroup
      SubnetIds:
      - !If
        - PrivA
        - !Ref PrivSubnetA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivSubnetB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivSubnetC
        - !Ref AWS::NoValue

  SSMMSGvpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableInterfaceEndpoints
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecGroup
      SubnetIds:
      - !If
        - PrivA
        - !Ref PrivSubnetA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivSubnetB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivSubnetC
        - !Ref AWS::NoValue

  EC2MSGvpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableInterfaceEndpoints
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecGroup
      SubnetIds:
      - !If
        - PrivA
        - !Ref PrivSubnetA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivSubnetB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivSubnetC
        - !Ref AWS::NoValue

  CFNvpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: EnableInterfaceEndpoints
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VpcEndpointSecGroup
      SubnetIds:
      - !If
        - PrivA
        - !Ref PrivSubnetA
        - !Ref AWS::NoValue
      - !If
        - PrivB
        - !Ref PrivSubnetB
        - !Ref AWS::NoValue
      - !If
        - PrivC
        - !Ref PrivSubnetC
        - !Ref AWS::NoValue

  ParamStoreVpcId:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub '/cloudformation/${AWS::StackName}/vpcid'
      Description: !Sub '${AWS::StackName} VPC ID' 
      Type: 'String'
      Value: !Ref VPC

  ParamStorePubSubnets:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub '/cloudformation/${AWS::StackName}/pubsubnets'
      Description: !Sub '${AWS::StackName} public subnets'
      Type: 'StringList'
      Value: !Sub
        - '${subnetA}, ${subnetB}, ${subnetC}'
        - { subnetA: !If [ PubA, !Ref PubSubnetA, "" ], subnetB: !If [ PubB, !Ref PubSubnetB, "" ], subnetC: !If [ PubC, !Ref PubSubnetC, "" ] }

  ParamStorePrivSubnets:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub '/cloudformation/${AWS::StackName}/privsubnets'
      Description: !Sub '${AWS::StackName} private subnets'
      Type: 'StringList'
      Value: !Sub
        - '${subnetA}, ${subnetB}, ${subnetC}'
        - { subnetA: !If [ PrivA, !Ref PrivSubnetA, "" ], subnetB: !If [ PrivB, !Ref PrivSubnetB, "" ], subnetC: !If [ PrivC, !Ref PrivSubnetC, "" ] }

  ParamStoreIntraSubnets:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub '/cloudformation/${AWS::StackName}/intrasubnets'
      Description: !Sub '${AWS::StackName} internal subnets'
      Type: 'StringList'
      Value: !Sub
        - '${subnetA}, ${subnetB}, ${subnetC}'
        - { subnetA: !If [ IntraA, !Ref IntraSubnetA, "" ], subnetB: !If [ IntraB, !Ref IntraSubnetB, "" ], subnetC: !If [ IntraC, !Ref IntraSubnetC, "" ] }


Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  PubSubnets:
    Description: Public Subnets
    Value: !Sub
      - '${subnetA}, ${subnetB}, ${subnetC}'
      - { subnetA: !If [ PubA, !Ref PubSubnetA, "" ], subnetB: !If [ PubB, !Ref PubSubnetB, "" ], subnetC: !If [ PubC, !Ref PubSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnets'

  PrivSubnets:
    Description: Private Subnets
    Value: !Sub
      - '${subnetA}, ${subnetB}, ${subnetC}'
      - { subnetA: !If [ PrivA, !Ref PrivSubnetA, "" ], subnetB: !If [ PrivB, !Ref PrivSubnetB, "" ], subnetC: !If [ PrivC, !Ref PrivSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-PrivSubnets'

  IntraSubnets:
    Description: Internal Subnets
    Value: !Sub
      - '${subnetA}, ${subnetB}, ${subnetC}'
      - { subnetA: !If [ IntraA, !Ref IntraSubnetA, "" ], subnetB: !If [ IntraB, !Ref IntraSubnetB, "" ], subnetC: !If [ IntraC, !Ref IntraSubnetC, "" ] }
    Export:
      Name: !Sub '${AWS::StackName}-IntraSubnets'
